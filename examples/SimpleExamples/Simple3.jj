/* Copyright (c) 2006, Sun Microsystems, Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *     * Redistributions of source code must retain the above copyright notice,
 *       this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the Sun Microsystems, Inc. nor the names of its
 *       contributors may be used to endorse or promote products derived from
 *       this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */


PARSER_BEGIN(Simple3)

/** Simple brace matcher. */
public class Simple3 {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Simple3 parser = new Simple3(System.in);
    parser.Input();
  }

}

PARSER_END(Simple3)

// a "lexical specification region"
// allow white space characters to be interspersed among the braces
SKIP :
{
  " "    // regexp
| "\t"   // regexp
| "\n"   // regexp
| "\r"   // regexp
}
//In addition to SKIP, JavaCC has three other lexical specification regions:
//
//. TOKEN:         This is used to specify lexical tokens (see next example)
//. SPECIAL_TOKEN: This is used to specify lexical tokens that are to be
//                 ignored during parsing.  In this sense, SPECIAL_TOKEN is
//                 the same as SKIP.  However, these tokens can be recovered
//                 within parser actions to be handled appropriately.
//. MORE:          This specifies a partial token.  A complete token is
//                 made up of a sequence of MORE's followed by a TOKEN
//                 or SPECIAL_TOKEN.

//Typically such token specifications are used for complex tokens such as identifiers and literals.  
TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
}

// non-terminal
// LHS          : RHS
// void Input() : rest

//When the non-terminal is used on the left-hand side of a production, it is
//considered to be declared and its syntax follows the Java syntax.  
//On the right-hand side its use is similar to a method call in Java.

/** Root production. */
void Input() :
//declaration region to declare "count" 
{ int count; }
{
  count=MatchedBraces() <EOF>
  
  { System.out.println("The levels of nesting is " + count); }
}

/** Brace counting production. */
// returns an int
int MatchedBraces() :
//declaration region to declare "nested_count"
{ int nested_count=0; }
// The following block is what the non-terminal expands to (called an "expansion")
// Other possible expansions:
//   e1 | e2 | e3 | ... : A choice of e1, e2, e3, etc.
//   ( e )+             : One or more occurrences of e
//   ( e )*             : Zero or more occurrences of e
//   (( e1 | e2 )* [ e3 ] ) | e4
{
        // [...] means an optional nested expansion and may also be written as (...)?
  <LBRACE> [ nested_count=MatchedBraces() ] <RBRACE>
  { return ++nested_count; } // action to return int
}
